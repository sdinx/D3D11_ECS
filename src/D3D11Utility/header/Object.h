//----------------------------------------------------------------------------------
// File : Object.h
// Desc : 
//----------------------------------------------------------------------------------

#ifndef  _INCLUDED_D3D11_UTILITY_OBJECT_
#define  _INCLUDED_D3D11_UTILITY_OBJECT_

//----------------------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------------------
#include  <string>

//----------------------------------------------------------------------------------
// base class
//----------------------------------------------------------------------------------
namespace  D3D11Utility
{

		class  Object  abstract
		{

		public:
				//----------------------------------------------------------------------------------
				// other
				//----------------------------------------------------------------------------------
				Object() = delete;
				Object( std::string  objectName ) :name( objectName ) {}


		protected:
				//----------------------------------------------------------------------------------
				// protected variables
				//----------------------------------------------------------------------------------
				unsigned  int  objectID;
				std::string  name;


		public:
				//----------------------------------------------------------------------------------
				// public variables
				//----------------------------------------------------------------------------------


		protected:
				//----------------------------------------------------------------------------------
				// protected methods
				//----------------------------------------------------------------------------------


		public:
				//----------------------------------------------------------------------------------
				// public methods
				//----------------------------------------------------------------------------------
				int  GetObjectID() { return  objectID; }
				std::string  ToString() { return  name; }
				void  Release() { name.clear(); name.shrink_to_fit(); }


		public:
				//----------------------------------------------------------------------------------
				// operator
				//----------------------------------------------------------------------------------
				inline  bool  operator==( const  Object*  var ) {
						return  ( this->objectID == var->objectID ) ? true : false;
				}
				inline  bool  operator!=( const  Object*  var ) {
						return  ( this->objectID != var->objectID ) ? true : false;
				}
				inline  bool  operator==( std::string  name ) {
						return  ( this->name == name ) ? true : false;
				}
				inline  bool  operator!=( std::string  name ) {
						return  ( this->name != name ) ? true : false;
				}


		};

}


#endif // ! _INCLUDED_D3D11_UTILITY_OBJECT_